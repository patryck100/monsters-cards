{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OAMrB,cALA,CAKA,OAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAK,GAA7C,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAKN,EAAMI,QAAQG,YCNdC,G,MAAW,SAACR,GAKvB,OAJAS,QAAQC,IAAIV,GAIL,qBAAKC,UAAU,YAAf,SACJD,EAAMW,SAASC,KAAI,SAACR,GAAD,OAElB,aAFiC,CAEhC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCVZQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsECG,G,wDAxEb,aAAe,IAAD,8BACZ,gBAoCFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SApCtC,EAAKC,MAAQ,CAEXb,SAAU,GAEVU,YAAa,IANH,E,qDA6Bd,WAAqB,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,OAC1CC,OAAM,SAACC,GAAD,OAAWtB,QAAQC,IAAI,4C,oBAOlC,WAAU,IAAD,EAC2BsB,KAAKR,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YAQZY,EAAmBtB,EAASuB,QAAO,SAAC9B,GAAD,OACvCA,EAAQE,KAAK6B,cAAcC,SAASf,EAAYc,kBAQlD,OACE,sBAAKlC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,YAAY,kBACZC,aAAciB,KAAKjB,eAErB,cAAC,EAAD,CAAUJ,SAAUsB,W,GApEVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b4ab7741.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props =>(\n    //When using the dollar simbol, it is exchanging whatever char comes next for what comes from the function within the curly brackets\n    //use \"&\" char to add more parameter into the robo webpage, example &size=220x220\n    //link: https://robohash.org/1?set=set2\n    //REMEMBER TO USE BACKWARD SINGLE QUOTES ` FOR src... \n    //can use Math.random() to generate random numbers\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id + 10}?set=set2&size=180x180`}/>\n        <h2> {props.monster.name} </h2>\n        <p>{ props.monster.email}</p>\n    </div>\n\n);","//this component only cares about displaying cards in some kind of configuration\n\nimport React from \"react\";\nimport {Card} from '../card/card.component';\nimport \"./card-list.styles.css\"; //using the css style to give the grid properties\n\nexport const CardList = (props) => {\n  console.log(props);\n  //return <div className='card-list'>{props.children}</div>;\n\n  //collecting all items fetched from URL, transforming into monsters, giving style and setting as props\n  return <div className=\"card-list\">\n    {props.monsters.map((monster) => ( //setting each item of the array \"monsters\" to be an unique monster\n        //key is used to identify each monster. So then if something is updated, only that is updated\n      <Card key={monster.id} monster={monster}/> //passing the monster into the Card component\n    ))}\n  </div>;\n};\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange}) => (\n    <input\n    className='search'\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n)","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.components\";\nimport \"./App.css\";\n\nclass App extends Component {\n  //creating a new component that will change the original state\n  constructor() {\n    super();\n    this.state = {\n      //creating an array of monsters\n      monsters: [],\n      //create an empty string\n      searchField: \"\",\n\n      //example of a monster's array of JSON string objects\n      /*monsters: [\n       {\n          name: 'Frankenstein',\n          id: 'asc1'\n        },\n        {\n          name: 'Dracula',\n          id: 'asr2'\n        },\n        {\n          name: 'Zombie',\n          id: 'as1w'\n        } \n      ]*/\n    };\n    //identifying \"this\" when calling from the handleChange method\n    //another way is using arrow function \"=>\"\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    //fetches data from somewhere and do whatever we want\n    fetch(\"https://jsonplaceholder.typicode.com/users\") //fetching from this URL\n      .then((response) => response.json()) //converting response into json format\n      .then((users) => this.setState({ monsters: users })) //setting the values to our monsters\n      .catch((error) => console.log(\"Some problem while fetching the URL\"));\n  }\n  //when using arrow function \"=>\" it binds automatically, so \"this\" works\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state; //short way to do the below example\n    /* \n    const monsters = this.state.monsters;\n    const searchField = this.state.searchField;\n    */\n\n    //create a new constant called filteredMonsters, which gets back a new array using the filter function with only the items which conditioning is true\n    //includes function is a boolean that validates whatever parameter if exist in an certain array\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    //keep listening to the components, if something changes, it renders the web application again\n    //input of type search holds a search box, whereas the placeholder function allows to write a string that is hidden when a user prompts new input in the search box\n    //e represents the sintatic event that receives the information, we update the state and re-render\n    //if we wanna see or do something with the \"state\" right after we set it, it needs a call back as example: this.setState({ searchField: e.target.value }, () => console.log(this.state));\n    //console.log in this case shows up in the developer tool on the webpage to see how things are working out\n    return (\n      <div className=\"App\">\n        <h1> Monsters Cards </h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}